<?php
// all registry tests must pass this (as must PackageFile objects)

$test->assertIsa('\pear2\Pyrus\PackageFile\v2\Release', $reg->release, 'right class');
$test->assertEquals(false, $reg->release[0]->getInstallCondition(), 'release 0, no conditions yet');
$reg->release[0]->installconditions['php']->min('5.2.0');
$test->assertEquals('5.2.0', $reg->release[0]->installconditions['php']->min, '5.2.0');
$test->assertEquals(array('php' => array('min' => '5.2.0')), $reg->release[0]->getInstallCondition(), 'release 0, php condition');
// defaults to "min"
$reg->release[0]->installconditions['php'] = '5.2.1';
$test->assertEquals('5.2.1', $reg->release[0]->installconditions['php']->min, '5.2.1');
// defaults to "pattern"
$reg->release[0]->installconditions['arch'] = 'i386';
$test->assertEquals('i386', $reg->release[0]->installconditions['arch']->pattern, 'i386');
$test->assertFalse($reg->release[0]->installconditions['arch']->conflicts, 'i386 conflicts');
$reg->release[0]->installconditions['arch']->pattern('i486')->conflicts();
$test->assertEquals('i486', $reg->release[0]->installconditions['arch']->pattern, 'i486');
$test->assertTrue($reg->release[0]->installconditions['arch']->conflicts, 'i486 conflicts');
// defaults to "name"
$reg->release[0]->installconditions['os'] = 'windows';
$test->assertEquals('windows', $reg->release[0]->installconditions['os']->name, 'windows');
// defaults to existing
$reg->release[0]->installconditions['extension']['PDO']->save();
$test->assertEquals('PDO', $reg->release[0]->installconditions['extension']['PDO']->name, 'PDO');
$test->assertEquals(null, $reg->release[0]->installconditions['extension']['PDO']->min, 'PDO min 1');
$reg->release[0]->installconditions['extension']['PDO']->name('PDO')->min('1.0');
$test->assertEquals('PDO', $reg->release[0]->installconditions['extension']['PDO']->name, 'PDO');
$test->assertEquals('1.0', $reg->release[0]->installconditions['extension']['PDO']->min, 'PDO min 2');
try {
    $reg->release[0]->ignore('path/to/file.ext');
    throw new Exception('did not fail path/to/file.ext');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Unknown file path/to/file.ext - add to filelist before ignoring', $e->getMessage(), 'unknown file');
}
$test->assertEquals(false, $reg->release[0]->getIgnore(), 'ignore should be empty');
$test->assertFalse($reg->release[0]->ignores('path/to/file.ext'), 'double check ignoring');
$reg->release[0]->ignore('src/SimpleChannelServer.php');
$test->assertEquals(array('attribs' => array('name' => 'src/SimpleChannelServer.php')), $reg->release[0]->getIgnore(), 'ignore should not be empty');
$test->assertTrue($reg->release[0]->ignores('src/SimpleChannelServer.php'), 'double check ignoring 2');
try {
    $reg->release[0]->installAs('path/to/anotherfile.ext', 'new/name.php');
    throw new Exception('did not fail path/to/anotherfile.ext');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Unknown file path/to/anotherfile.ext - add to filelist before adding install as tag', $e->getMessage(), 'unknown file');
}
$test->assertEquals(false, $reg->release[0]->getInstallAs(), 'install-as should be empty');
$test->assertEquals('path/to/anotherfile.ext', $reg->release[0]->installsAs('path/to/anotherfile.ext'), 'double check install-as');
$reg->release[0]->installAs('src/SimpleChannelServer/Get.php', 'new/name.php');
$test->assertEquals(array('attribs' => array('name' => 'src/SimpleChannelServer/Get.php', 'as' => 'new/name.php')), $reg->release[0]->getInstallAs(), 'install-as should not be empty');
$test->assertEquals('new/name.php', $reg->release[0]->installsAs('src/SimpleChannelServer/Get.php'), 'double check installing as 2');
$test->assertTrue($reg->release[0]->ignores('src/SimpleChannelServer.php'), 'double check ignoring 3');
// add another release
$i = count($reg->release);
$test->assertFalse(isset($reg->release[1]), 'isset 1');
$reg->release[$i]->ignore('src/SimpleChannelServer/Get.php');
$test->assertTrue(isset($reg->release[1]), 'isset 2');
$reg->release[$i]->installAs('src/SimpleChannelServer.php', 'new/name.php');

try {
    $a = $reg->release[0]->notfound;
    throw new Exception('notfound succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Unknown variable notfound' .
        ', installconditions is the only supported variable', $e->getMessage(), 'notfound message');
}
$test->assertEquals(1, count($reg->release[0]), 'count of release with index');
$test->assertTrue($reg->release[0]->ignores('src/SimpleChannelServer.php'), 'double check ignoring 4');
$test->assertFalse($reg->release[1]->ignores('src/SimpleChannelServer.php'), 'double check ignoring 5');
$test->assertEquals('new/name.php', $reg->release[0]->installsAs('src/SimpleChannelServer/Get.php'), 'double check installing as 3');
$test->assertEquals('new/name.php', $reg->release[1]->installsAs('src/SimpleChannelServer.php'), 'double check installing as 4');
// remove release
$test->assertEquals('foo.php', $reg->release[1]->installsAs('foo.php'), 'install-as with non-existing file');
unset($reg->release[1]);
$test->assertFalse(isset($reg->release[1]), 'isset 3');
$test->assertTrue(isset($reg->release[0]), 'isset 4');
// remove all releases
$reg->release = null;
$test->assertFalse(isset($reg->release[1]), 'isset 5');
$test->assertFalse(isset($reg->release[0]), 'isset 6');
$test->assertEquals(null, $reg->release->getInstallAs(), 'install-as no index');
$test->assertEquals(null, $reg->release->getIgnore(), 'ignore no index');
$test->assertEquals(null, $reg->release->getInstallCondition(), 'installcondition, no index');

try {
    $a = $reg->release[24];
    throw new Exception('24 succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Can only set the next highest release index 0, not 24', $e->getMessage(), '24 1');
}
$a = $reg->release[0]->ignore('src/SimpleChannelServer.php');

try {
    $a = $reg->release[24];
    throw new Exception('24 succeeded 2');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Can only set the next highest release index 1, not 24', $e->getMessage(), '24 2');
}
