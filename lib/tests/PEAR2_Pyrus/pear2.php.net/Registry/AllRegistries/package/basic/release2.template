<?php
// all registry tests must pass this (as must PackageFile objects)

$test->assertIsa('\pear2\Pyrus\PackageFile\v2\Release', $reg->release, 'right class');

try {
    $reg->release[] = 5;
    throw new Exception('setting to non-object succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot set 0 to non-\pear2\Pyrus\PackageFile\v2\Release', $e->getMessage(), '[] = 5');
}

try {
    $reg->release['foo'] = 5;
    throw new Exception('setting to non-object succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot set foo', $e->getMessage(), '[foo] = 5');
}

$a = new \pear2\Pyrus\PackageFile\v2\Release($reg, array(), array());
$reg->release[] = $a;
$a = $reg->release[0];

$test->assertEquals(false, $a->getInstallCondition(), 'installcondition');
$test->assertEquals(false, $a->getInstallAs(), 'installas');
$test->assertEquals(false, $a->getIgnore(), 'ignore');
$a->installconditions['php'] = '5.2.0';

try {
    $reg->release->ignore('oops');
    throw new Exception('ignore without index succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot ignore ' .
                            'file oops without specifying which release section to ignore it in', $e->getMessage(), 'ignore without index');
}

try {
    $reg->release->installAs('oops', 'ie');
    throw new Exception('installas without index succeeded');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot install ' .
                            'file oops to ie' .
                            ' without specifying which release section to install it in', $e->getMessage(), 'installas without index');
}

$reg->release[0]->ignore('src/SimpleChannelServer.php');
$test->assertEquals(array('attribs' => array('name' => 'src/SimpleChannelServer.php')), $reg->release[0]->getIgnore(), 'ignore 1');
$reg->release[0]->ignore('src/SimpleChannelServer/Get.php');
$test->assertEquals(array(array('attribs' => array('name' => 'src/SimpleChannelServer.php')),
                        array('attribs' => array('name' => 'src/SimpleChannelServer/Get.php'))), $reg->release[0]->getIgnore(), 'ignore 2');

$reg->release[0]->installAs('src/SimpleChannelServer.php', 'foo');
$test->assertEquals(array('attribs' => array('name' => 'src/SimpleChannelServer.php', 'as' => 'foo')), $reg->release[0]->getInstallAs(), 'install-as 1');
$reg->release[0]->installAs('src/SimpleChannelServer/Get.php', 'foo1');
$test->assertEquals(array(array('attribs' => array('name' => 'src/SimpleChannelServer.php', 'as' => 'foo')),
                        array('attribs' => array('name' => 'src/SimpleChannelServer/Get.php', 'as' => 'foo1'))), $reg->release[0]->getInstallAs(), 'install-as 2');

$reg->release[0]->installconditions['extension']['foo']->name(null);
$reg->release[0]->installAs('src/SimpleChannelServer.php', 'boo');
$test->assertEquals(array (
  'php' => 
  array (
    'min' => '5.2.0',
  ),
), $reg->release[0]->getInstallCondition(), 'after extension unset');
$reg->release[0]->installconditions['php']->min(null);
$test->assertEquals(false, $reg->release[0]->getInstallCondition(), 'after php unset');
$test->assertEquals('php', $reg->release[0]->installconditions['php']->installcondition, 'installcondition var');

try {
    $reg->release[0]->installconditions->min('oops');
    throw new Exception('min oops did not fail');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot set variables for unknown install condition', $e->getMessage(), 'min oops');
}

try {
    $a = $reg->release[0]->installconditions['extension'][0];
    throw new Exception('extension 0 did not fail');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Access extension installconditions by name, not number', $e->getMessage(), 'extension 0');
}

$a = $reg->release[0]->installconditions['extension']['foo'];
$a->name('foo');
$test->assertEquals('foo', $reg->release[0]->installconditions['extension']['foo']->name, '1 name');

try {
    $a = $reg->release[0]->installconditions[50];
    throw new Exception('installconditions 50 did not fail');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot access numeric index', $e->getMessage(), 'installconditions 50');
}
$reg->release = null;
$reg->release[0]->installconditions['os']->name('windows');
$test->assertEquals('windows', $reg->release[0]->installconditions['os']->name, 'os name');
$reg->release[1]->installconditions['arch']->pattern('i386');
$test->assertEquals('i386', $reg->release[1]->installconditions['arch']->pattern, 'arch pattern');

try {
    $a = $reg->release[0]->installconditions['foobar'];
    throw new Exception('installconditions foobar did not fail');
} catch (\pear2\Pyrus\PackageFile\v2\Release\Exception $e) {
    $test->assertEquals('Cannot access unknown install condition foobar', $e->getMessage(), 'installconditions foobar');
}
