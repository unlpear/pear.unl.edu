<?php
// all registry tests must pass this (as must PackageFile objects)

$test->assertEquals('http://www.opensource.org/licenses/bsd-license.php', $reg->license['uri'], 'license uri');
$test->assertEquals('New BSD License', $reg->license['name'], 'license content');
$test->assertEquals(null, $reg->license['path'], 'license path');
$reg->license['uri'] = 'foobar';
$reg->license['name'] = 'hi';
$reg->license['path'] = 'boo';
$test->assertEquals('foobar', $reg->license['uri'], 'license uri 2');
$test->assertEquals('hi', $reg->license['name'], 'license name 2');
$test->assertEquals('boo', $reg->license['path'], 'license path 2');

$test->assertTrue(isset($reg->license['name']), 'name set');
unset($reg->license['name']);
$test->assertfalse(isset($reg->license['name']), 'name unset');
$test->assertEquals(null, $reg->license['name'], 'license name 3');
$test->assertTrue(isset($reg->license['uri']), 'uri set');
unset($reg->license['uri']);
$test->assertFalse(isset($reg->license['uri']), 'uri unset');
$test->assertEquals(null, $reg->license['uri'], 'license uri 3');
$test->assertTrue(isset($reg->license['path']), 'path set');
unset($reg->license['path']);
$test->assertFalse(isset($reg->license['path']), 'path unset');
$test->assertEquals(null, $reg->license['path'], 'license path 3');
$reg->license['name'] = 'test';
$test->assertTrue(isset($reg->license['name']), 'name set 2');

$newguy = new \pear2\Pyrus\PackageFile\v2;
$test->assertEquals('New BSD License', $newguy->license['name'], 'newguy name');
$test->assertEquals('http://www.opensource.org/licenses/bsd-license.php', $newguy->license['uri'], 'newguy uri');
$test->assertEquals(null, $newguy->license['path'], 'newguy path');

unset($newguy->license['uri']);
$newguy->license['name'] = 'foobar'; // test name without path
$test->assertEquals('foobar', $newguy->license['name'], 'newguy name');
$test->assertEquals('foobar', $newguy->license->getInfo(), 'array test');

$newguy->license['uri'] = 'hello';
$test->assertEquals('hello', $newguy->license['uri'], 'newguy uri');
$test->assertEquals(array( '_content' => 'foobar', 'attribs' => array('uri' => 'hello'),), $newguy->license->getInfo(), 'array test 2');

$newguy->license['path'] = 'hello2';
$test->assertEquals('hello2', $newguy->license['path'], 'newguy path');
$test->assertEquals(array('_content' => 'foobar', 'attribs' => array('uri' => 'hello', 'path' => 'hello2')), $newguy->license->getInfo(), 'array test 3');

try {
    $newguy->license['oops'] = 'hi';
    throw new Exception('oops should have failed');
} catch (\pear2\Pyrus\PackageFile\v2\License\Exception $e) {
    $test->assertEquals('Unknown license trait oops, cannot set value', $e->getMessage(), 'message');
}

try {
    $newguy->license['name'] = array('uri' => 'sneaky');
    throw new Exception('non-string should have failed');
} catch (\pear2\Pyrus\PackageFile\v2\License\Exception $e) {
    $test->assertEquals('Can only set license to string', $e->getMessage(), 'message');
}

$p = new \pear2\Pyrus\PackageFile\v2;
$p->fromArray(array('package' => array('license' => 'PHP License')));
$test->assertEquals('PHP License', $p->license['name'], 'name 1');
unset($p->license['name']);
$test->assertEquals(null, $p->license['name'], 'name 2');
$test->assertEquals(false, isset($p->license['foo']), 'foo isset');
