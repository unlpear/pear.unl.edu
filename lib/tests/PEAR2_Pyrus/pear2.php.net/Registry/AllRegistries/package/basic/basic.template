<?php
// all registry tests must pass this (as must PackageFile objects)
$test->assertEquals('PEAR2_SimpleChannelServer', $reg->name, 'name');
$test->assertEquals('pear2.php.net', $reg->channel, 'channel');
$test->assertEquals('A Simple Channel Server for PEAR2 compatible channels', $reg->summary, 'summary');
$test->assertEquals('This package contains a set of scripts to create a simple PEAR compatible
channel server. Included with the package is the pearscs command which you
can use for the command line to manage a pear channel.

The pearscs utility will be installed in the directory configured by the
bin_dir setting within Pyrus.', $reg->description, 'description');
$test->assertEquals('2008-12-15', $reg->date, 'date');
$test->assertEquals('11:51:01', $reg->time, 'time');
$test->assertEquals('First attempt.', $reg->notes, 'notes');
$test->assertEquals('alpha', $reg->{'api-state'}, 'api-state');
$test->assertEquals('devel', $reg->state, 'state');
$test->assertEquals('0.1.0', $reg->{'release-version'}, 'release-version');
$test->assertEquals('0.1.0', $reg->{'api-version'}, 'api-version');
$test->assertEquals(false, $reg->sourcepackage, 'sourcepackage');
$test->assertEquals('', $reg->releases, 'releases');

$rawdeps = $reg->rawdeps;

usort($rawdeps['required']['os'], function($a, $b){return strnatcasecmp($b['name'], $a['name']);});
$test->assertEquals(array (
  'required' => 
  array (
    'php' => 
    array (
      'min' => '5.2.0',
      'exclude' => '5.2.8',
    ),
    'pearinstaller' => 
    array (
      'min' => '2.0.0a1',
    ),
    'package' => 
    array (
      0 => 
      array (
        'name' => 'File',
        'channel' => 'pear.php.net',
        'min' => '1.2.0',
      ),
      1 => 
      array (
        'name' => 'Other',
        'channel' => 'pear.php.net',
        'conflicts' => '',
      ),
      2 => 
      array (
        'name' => 'PackageName',
        'channel' => 'pecl.php.net',
        'min' => '1.1.0',
        'max' => '1.2.0',
        'recommended' => '1.1.1',
        'exclude' => 
        array (
          0 => '1.1.0a1',
          1 => '1.1.0a2',
        ),
        'providesextension' => 'packagename',
      ),
    ),
    'subpackage' => 
    array (
      'name' => 'Foo',
      'channel' => 'pear2.php.net',
      'min' => '1.0.0',
      'max' => '2.0.0',
      'recommended' => '1.2.0',
      'exclude' => 
      array (
        0 => '1.1.0',
        1 => '1.1.1',
      ),
    ),
    'extension' => 
    array (
      'name' => 'phar',
      'min' => '2.0.0',
      'exclude' => '2.0.1',
    ),
    'os' => 
    array (
      0 => 
      array (
        'name' => 'windows',
      ),
      1 => 
      array (
        'name' => 'vista',
        'conflicts' => '',
      ),
    ),
    'arch' => 
    array (
      'pattern' => 'i386',
    ),
  ),
  'optional' => 
  array (
    'package' => 
    array (
      'name' => 'PEAR',
      'channel' => 'pear.php.net',
      'min' => '1.7.0',
    ),
    'subpackage' => 
    array (
      'name' => 'Bar',
      'channel' => 'pear2.php.net',
      'min' => '1.5.0',
    ),
  ),
  'group' => 
  array (
    'attribs' => 
    array (
      'hint' => 'Install optional stuff as a group',
      'name' => 'name',
    ),
    'package' => 
    array (
      0 => 
      array (
        'name' => 'PackageName1',
        'channel' => 'pear2.php.net',
      ),
      1 => 
      array (
        'name' => 'PackageName2',
        'channel' => 'pear2.php.net',
        'min' => '1.2.0',
      ),
      2 => 
      array (
        'name' => 'PackageName',
        'channel' => 'pecl.php.net',
        'min' => '1.1.0',
        'max' => '1.2.0',
        'recommended' => '1.1.1',
        'exclude' => 
        array (
          0 => '1.1.0a1',
          1 => '1.1.0a2',
        ),
        'providesextension' => 'packagename',
      ),
    ),
    'subpackage' => 
    array (
      'name' => 'PackageName3',
      'channel' => 'pear2.php.net',
      'recommended' => '1.2.1',
    ),
    'extension' => 
    array (
      'name' => 'extension',
      'exclude' => array('5.2.8','5.2.9'),
    ),
  ),
), $rawdeps, 'rawdeps');
$test->assertEquals(true, $reg->schemaOK, 'schemaOK');